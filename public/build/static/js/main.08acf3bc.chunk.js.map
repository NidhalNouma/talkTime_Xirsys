{"version":3,"sources":["component/WaveAudio.js","hooks/Xirsys.js","hooks/Main1.js","component/Audio.js","hooks/Call.js","App.js","reportWebVitals.js","index.js"],"names":["WaveAudio","stream","lstream","useState","Wave","wave","lwave","rel","setRel","audio","useRef","useEffect","interval","setTimeout","r","clearTimeout","stopStream","active","fromStream","type","colors","console","log","current","srcObject","id","ref","style","display","volume","autoPlay","Xirsys","setRandomUser","rstream","Object","$xirsys","_md","media","info","this","evtListeners","getLocalDevices","then","devices","updateDevices","prototype","localDevices","localStream","DEVICES_UPDATED","ON_LOCAL_STREAM","getUserMedia","constraints","cbSuccess","cbFail","video","own","navigator","mediaDevices","str","emit","enumerateDevices","list","arguments","length","items","audioin","videoin","forEach","device","deviceId","defaults","push","kind","on","sEvent","cbFunc","off","hasOwnProperty","index","indexOf","splice","data","handlers","i","l","apply","_ice","ice","apiUrl","channelPath","channel","cleanChPath","iceServers","ident","secret","doICE","onICEList","xhr","XMLHttpRequest","onreadystatechange","$evt","readyState","status","res","JSON","parse","responseText","filterPaths","v","path","open","setRequestHeader","btoa","send","arr","a","item","url","urls","lastIndexOf","substr","_sig","signal","userName","sig","tmpToken","sigHostPath","pendListeners","heartbeat","connectTo","ver","keepAliveInt","connected","close","stopHeart","doToken","_headers","$","ajax","dataType","headers","error","success","doSignal","host","randomUser","users","setupSocket","WebSocket","addEventListener","evt","startHeart","event","f","msg","pkt","payload","p","meta","m","msgEvent","o","fromPeer","split","sysNum","substring","sendMessage","toPeer","undefined","t","m_event","stringify","clearInterval","setInterval","_p2p","p2p","mediaStream","servers","pc","receiveCandidate","receiveOffer","receiveAnswer","forceTurn","remotePeerID","remoteStreams","isCaller","autoAnswer","peerConnSuccess","peerConnRequest","iceDisconnected","updateMediaStream","getTracks","track","addTrack","createOffer","desc","setLocalAndSendMessage","catch","err","onCreateSessionDescriptionError","callPeer","custID","createPeerConnection","iceCandidate","rtcIceCandidate","RTCIceCandidate","addIceCandidate","acceptRequest","offer","isVerfied","verified","setRemoteDescription","RTCSessionDescription","e","createAnswer","RTCPeerConnection","ontrack","streams","onicecandidate","cand","candidate","sdpMid","sdpMLineIndex","onremovestream","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","message","hangup","callId","addRemoteStream","remoteStream","getLiveStream","sessionDescription","setLocalDescription","Main","mediaConstraints","setLStream","MediaStream","setRStream","username","setUsername","remoteCallID","setRemoteCallID","startCall","setStartCall","peer","setPeer","setSig","setMedia","setIce","call","setCall","inCall","setInCall","onICE","isTURN","getURLParameter","onReady","onStopCall","onStartCall","remoteId","onMediaDevices","mics","cams","camList","micList","empty","append","groupId","label","html","name","url_string","window","location","href","c","URL","searchParams","get","setLocalStream","alert","onLoad","s4","Math","floor","random","toString","guid","urlName","Audio","answer","setStream","stopAudioOnly","s","color","height","width","stop","Call","state","setState","btnText","setBtnText","click","App","className","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08acf3bc.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Wave from \"wave-visualizer\";\n\nfunction WaveAudio({ stream, lstream }) {\n  const [wave] = useState(new Wave());\n  const [lwave] = useState(new Wave());\n  const [rel, setRel] = useState(0);\n\n  const audio = useRef(null);\n\n  useEffect(() => {\n    const interval = setTimeout(() => {\n      setRel((r) => r + 1);\n      // console.log(rel);\n    }, 1000);\n    return () => clearTimeout(interval);\n  }, [rel]);\n\n  useEffect(() => {\n    wave.stopStream();\n    lwave.stopStream();\n    if (stream)\n      if (stream.active)\n        wave.fromStream(stream, \"wave\", {\n          type: \"shine\",\n          colors: [\"rgba(149, 54, 64,1)\", \"white\", \"blue\"],\n        });\n\n    lstream &&\n      lstream.active &&\n      lwave.fromStream(lstream, \"lwave\", {\n        type: \"shine\",\n        colors: [\"rgba(45, 134, 233, 1)\", \"white\", \"blue\"],\n      });\n\n    console.log(\"Start streaming audio ...,\", stream);\n\n    audio.current.srcObject = stream;\n    return () => {\n      wave.stopStream();\n      lwave.stopStream();\n    };\n  }, [lstream, stream, rel]);\n\n  return (\n    <div>\n      <canvas id=\"wave\"></canvas>\n      <br />\n      <canvas id=\"lwave\"></canvas>\n      <audio\n        ref={audio}\n        style={{ display: \"none\" }}\n        volume=\"true\"\n        autoPlay\n      ></audio>\n    </div>\n  );\n}\n\nexport default WaveAudio;\n","import $ from \"jquery\";\nimport { useState, useEffect } from \"react\";\n\n// Media\n\nfunction Xirsys(setRandomUser, rstream) {\n  const [$xirsys] = useState(new Object());\n\n  useEffect(() => {\n    let _md = ($xirsys.media = function (info) {\n      if (!info) info = {};\n      console.log(\"*media*  info: \", info);\n      //internal values\n      this.info = info;\n      this.evtListeners = {};\n      this.getLocalDevices().then((devices) => {\n        this.updateDevices(devices);\n      });\n    });\n\n    _md.prototype.localDevices = null;\n    _md.prototype.localStream = null;\n\n    //events\n    _md.prototype.DEVICES_UPDATED = \"devicesUpdated\";\n    _md.prototype.ON_LOCAL_STREAM = \"onLocalStream\";\n\n    /* PUBLIC */\n\n    _md.prototype.getUserMedia = function (constraints, cbSuccess, cbFail) {\n      if (!constraints) constraints = { audio: true, video: true };\n      //return promise\n      var own = this;\n      return navigator.mediaDevices.getUserMedia(constraints).then((str) => {\n        own.localStream = str;\n        own.emit(own.ON_LOCAL_STREAM, str);\n        return str;\n      });\n      /* .catch(err => { \n              console.log('Could not get Media: ', err);\n              throw err;\n          }); */\n    };\n\n    _md.prototype.getLocalDevices = function () {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n        console.log(\n          \"Error: Could not get list of media devices!  This might not be supported by this browser.\"\n        );\n        return;\n      }\n      let d = navigator.mediaDevices.enumerateDevices();\n      return d;\n    };\n\n    /* PRIVATE */\n\n    _md.prototype.updateDevices = function (list) {\n      console.log(\"*media*  updateDevices \", list);\n      if (arguments.length === 0) return;\n      //set local list. dispatch event that list is updated.\n      let items = { audioin: [], videoin: [] };\n\n      list.forEach((device) => {\n        //console.log('device: ',device);\n        if (device.deviceId === \"default\") {\n          if (!items.defaults) items.defaults = [];\n          items.defaults.push(device);\n          return;\n        }\n        switch (device.kind) {\n          case \"audioinput\":\n            if (device.deviceId !== \"default\") {\n              items.audioin.push(device);\n            }\n            break;\n          case \"videoinput\":\n            if (device.deviceId !== \"default\") {\n              items.videoin.push(device);\n            }\n            break;\n          default:\n            break;\n        }\n      });\n      //console.log('Items list: ',items);\n      this.localDevices = items;\n      this.emit(this.DEVICES_UPDATED, this.localDevices);\n    };\n\n    //UTILS\n\n    /* EVENTS */\n\n    _md.prototype.on = function (sEvent, cbFunc) {\n      //console.log('*p2group*  on ',sEvent,', func: '+cbFunc);\n      if (!sEvent || !cbFunc) {\n        console.log('error:  missing arguments for \"on\" event.');\n        return false;\n      }\n      //if event does not exist create it and give it an array for listeners.\n      if (!this.evtListeners[sEvent]) this.evtListeners[sEvent] = [];\n      //add listener to event.\n      this.evtListeners[sEvent].push(cbFunc);\n    };\n    _md.prototype.off = function (sEvent, cbFunc) {\n      if (!this.evtListeners.hasOwnProperty(sEvent)) return false; //end\n\n      let index = this.evtListeners[sEvent].indexOf(cbFunc);\n      if (index !== -1) {\n        this.evtListeners[sEvent].splice(index, 1);\n        return true; //else end here.\n      }\n      return false; //else end here.\n    };\n\n    _md.prototype.emit = function (sEvent, data) {\n      let handlers = this.evtListeners[sEvent];\n      if (!!handlers) {\n        let l = handlers.length,\n          i;\n        for (i = 0; i < l; i++) {\n          let item = handlers[i];\n          item.apply(this, [{ type: sEvent, data: data }]);\n        }\n      }\n    };\n\n    console.log(\"$xirsys.media Loaded Successfuly!!!\");\n    _md = null;\n\n    //Ice\n\n    var _ice = ($xirsys.ice = function (apiUrl, info) {\n      if (!info) info = {};\n      this.info = info;\n      this.apiUrl = !!apiUrl ? apiUrl : \"/webrtc\";\n      this.evtListeners = {};\n\n      //path to channel we are sending data to.\n      this.channelPath = !!info.channel ? this.cleanChPath(info.channel) : \"\";\n\n      this.iceServers = null;\n      if (!!this.apiUrl) {\n        if (this.info.ident && this.info.secret) {\n          this.doICE(this.info.ident, this.info.secret); //first get our token.\n        } else {\n          this.doICE();\n        }\n      }\n    });\n\n    _ice.prototype.onICEList = \"onICEList\";\n\n    _ice.prototype.doICE = function (ident, secret) {\n      console.log(\"*ice*  doICE: \", this.apiUrl + \"/_turn\" + this.channelPath);\n      var own = this;\n      var xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = function ($evt) {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          var res = JSON.parse(xhr.responseText);\n          console.log(\"*ice*  response: \", res);\n          own.iceServers = own.filterPaths(res.v.iceServers);\n\n          own.emit(own.onICEList);\n        }\n      };\n      var path = this.apiUrl + \"/_turn/\" + this.channelPath;\n      xhr.open(\"PUT\", path, true);\n      if (ident && secret)\n        xhr.setRequestHeader(\n          \"Authorization\",\n          \"Basic \" + btoa(`${ident}:${secret}`)\n        );\n      xhr.send();\n    };\n\n    //check for depricated RTCIceServer \"url\" property, needs to be \"urls\" now.\n    _ice.prototype.filterPaths = function (arr) {\n      var l = arr.length,\n        i;\n      var a = [];\n      for (i = 0; i < l; i++) {\n        var item = arr[i];\n        var v = item.url;\n        if (!!v) {\n          item.urls = v;\n          delete item.url;\n        }\n        a.push(item);\n      }\n      return a;\n    };\n\n    //formats the custom channel path how we need it.\n    _ice.prototype.cleanChPath = function (path) {\n      //has slash at front\n      console.log(\"cleanChPath path recv: \" + path);\n      if (path.indexOf(\"/\") !== 0) path = \"/\" + path;\n      if (path.lastIndexOf(\"/\") === path.length - 1)\n        path = path.substr(0, path.lastIndexOf(\"/\"));\n      console.log(\"cleanChPath new path: \" + path);\n      return path;\n    };\n\n    _ice.prototype.on = function (sEvent, cbFunc) {\n      //console.log('*ice*  on ',sEvent);\n      if (!sEvent || !cbFunc) {\n        console.log(\"error:  missing arguments for on event.\");\n        return false;\n      }\n      if (!this.evtListeners[sEvent]) this.evtListeners[sEvent] = [];\n      this.evtListeners[sEvent].push(cbFunc);\n    };\n    _ice.prototype.off = function (sEvent, cbFunc) {\n      if (!this.evtListeners.hasOwnProperty(sEvent)) return false; //end\n\n      var index = this.evtListeners[sEvent].indexOf(cbFunc);\n      if (index !== -1) {\n        this.evtListeners[sEvent].splice(index, 1);\n        return true; //else end here.\n      }\n      return false; //else end here.\n    };\n\n    _ice.prototype.emit = function (sEvent, data) {\n      var handlers = this.evtListeners[sEvent];\n      if (!!handlers) {\n        var l = handlers.length;\n        for (var i = 0; i < l; i++) {\n          var item = handlers[i];\n          item.apply(this, [{ type: this.onICEList }]);\n        }\n      }\n    };\n\n    console.log(\"$xirsys.ice Loaded Successfuly!!!\");\n    _ice = null;\n\n    // Signal\n\n    var _sig = ($xirsys.signal = function (apiUrl, userName, info) {\n      if (!info) info = {};\n      this.info = info;\n      //internal values\n      this.sig = null; //local signal object.\n      this.tmpToken = null; //authorized token for signal calls\n      this.sigHostPath = null; //full authorized path to signaling service.\n      this.pendListeners = []; //event listener - hold until init.\n      this.heartbeat = null; //interval that keeps the signal open.\n      this.evtListeners = {};\n\n      //path to channel we are sending data to.\n      //this.channelPath = !!info.channel ? this.cleanChPath(info.channel) : '';\n\n      this.userName = !!userName ? userName : null;\n      this.apiUrl = !!apiUrl ? apiUrl : \"/webrtc\";\n      //console.log('*signal*  constructed');\n      this.connectTo(!!info.channel ? info.channel : \"\");\n    });\n\n    _sig.prototype.ver = \"v2\";\n    _sig.prototype.keepAliveInt = 800;\n    _sig.prototype.connected = false;\n\n    _sig.prototype.close = function () {\n      console.log(\"close \", this.sig);\n      if (this.heartbeat) this.stopHeart();\n      if (this.sig) this.sig.close();\n    };\n\n    _sig.prototype.connectTo = function (channel) {\n      this.channelPath = !!channel ? this.cleanChPath(channel) : \"\";\n      console.log(\"connectTo: \", this.channelPath);\n      //if connected stop current, then do new.\n      if (!!this.sig) {\n        this.close();\n        var own = this;\n        setTimeout(() => {\n          own.doToken();\n        }, 800);\n      } else if (!!this.apiUrl) {\n        //!!this.userName &&\n        if (this.info.ident && this.info.secret) {\n          this.doToken(this.info.ident, this.info.secret); //first get our token.\n        } else {\n          this.doToken();\n        }\n      } else {\n        console.log(\"Error: Could connect signal!\");\n      }\n      return true;\n    };\n\n    _sig.prototype.doToken = function (ident, secret) {\n      var path =\n        this.apiUrl + \"/_token\" + this.channelPath + \"?k=\" + this.userName;\n      console.log(\"*signal*  PUT doToken to \" + path);\n      var own = this;\n      var _headers = {};\n      if (ident && secret) {\n        _headers[\"Authorization\"] = \"Basic \" + btoa(ident + \":\" + secret);\n      }\n      $.ajax({\n        url: path,\n        type: \"PUT\",\n        dataType: \"json\",\n        headers: _headers,\n        error: function (data) {\n          console.log(\"*signal*  error: \", data);\n        },\n        success: function (data) {\n          own.tmpToken = data.v;\n          if (own.tmpToken === \"no_namespace\") {\n            console.log(\"*signal*  fail: \", own.tmpToken);\n            return;\n          }\n          console.log(\"*signal*  token: \", own.tmpToken);\n          if (own.info.ident && own.info.secret) {\n            own.doSignal(own.info.ident, own.info.secret); //first get our token.\n          } else {\n            own.doSignal();\n          }\n        },\n      });\n    };\n\n    _sig.prototype.doSignal = function (ident, secret) {\n      console.log(\n        \"*signal*  GET doSignal to \" +\n          this.apiUrl +\n          \"/_host\" +\n          this.channelPath +\n          \"?type=signal&k=\" +\n          this.userName\n      );\n      var own = this;\n      var path = this.info.channel\n        ? this.apiUrl +\n          \"/_host\" +\n          this.channelPath +\n          \"?type=signal&k=\" +\n          this.userName\n        : this.apiUrl + \"/_host?type=signal&k=\" + this.userName;\n      var _headers = {};\n      if (ident && secret) {\n        _headers[\"Authorization\"] = \"Basic \" + btoa(ident + \":\" + secret);\n      }\n      $.ajax({\n        url: path,\n        type: \"GET\",\n        dataType: \"json\",\n        headers: _headers,\n        error: function (data) {\n          console.log(\"*signal*  error: \", data);\n        },\n        success: function (data) {\n          own.host = data.v + \"/\" + own.ver + \"/\" + own.tmpToken;\n          console.log(\"KKKKKKKKK \", data);\n          if (data.randomUser) {\n            own.randomUser = data.randomUser;\n            setRandomUser(data.randomUser);\n          }\n\n          if (data.users) own.users = data.users;\n\n          console.log(\"signal host: \", own.host);\n          own.setupSocket();\n        },\n      });\n    };\n\n    //setup socket to signaling server.\n    _sig.prototype.setupSocket = function () {\n      console.log(\"*signal*  setupSocket to \" + this.host);\n      var own = this;\n      this.sig = new WebSocket(this.host);\n      //notify when connection is open\n      this.sig.addEventListener(\"open\", (evt) => {\n        own.startHeart();\n        own.connected = true;\n      });\n      //notify when connection closed\n      this.sig.addEventListener(\"close\", (evt) => {\n        if (this.heartbeat) own.stopHeart();\n        own.connected = false;\n        this.sig = null;\n      });\n\n      //add pending listeners to signaling object.\n      var l = this.pendListeners.length;\n      if (l > 0) {\n        for (var i = 0; i < l; i++) {\n          var item = this.pendListeners[i];\n          this.on(item.event, item.f);\n        }\n        this.pendListeners = [];\n      }\n      //notify when a message is received from signal network.\n      this.sig.addEventListener(\"message\", (msg) => {\n        var pkt = JSON.parse(msg.data);\n        console.log(\"*signal*  signal message! \", pkt);\n        var payload = pkt.p; //the actual message data sent\n        var meta = pkt.m; //meta object\n        var msgEvent = meta.o; //event label of message\n        // var toPeer = meta.t; //msg to user (if private msg)\n        var fromPeer = meta.f; //msg from user\n        if (!!fromPeer) {\n          //remove the peer path to display just the name not path.\n          var p = fromPeer.split(\"/\");\n          fromPeer = p[p.length - 1];\n        }\n        switch (msgEvent) {\n          //first connect, list of all peers connected.\n          case \"peers\":\n            //this is first call when you connect,\n            //  so we can check for channelPath here dynamically.\n            var sysNum = meta.f.lastIndexOf(\"__sys__\");\n            if (sysNum > -1 && !this.channelPath) {\n              own.channelPath = meta.f.substring(0, sysNum); //save message path for sending.\n              console.log(\"*signal*  channelPath \", this.channelPath);\n            }\n            //setUsers(payload.users);\n            break;\n          //new peer connected\n          case \"peer_connected\":\n            //addUser(fromPeer);\n            break;\n          //peer left.\n          case \"peer_removed\":\n            //removeUser(fromPeer);\n            break;\n          //message received. Call to display.\n          case \"message\":\n            //onUserMsg(payload.msg, fromPeer, toPeer);\n            var data = payload.msg;\n            data.f = fromPeer;\n            if (\n              data.type === \"candidate\" ||\n              data.type === \"offer\" ||\n              data.type === \"answer\" ||\n              data.type === \"custom\"\n            ) {\n              own.emit(data.type, data);\n            }\n            break;\n          default:\n            break;\n        }\n        own.emit(\"message\", msg.data);\n      });\n      //console.log('sig:  ',this.sig);\n    };\n    // User event, sends user message.\n    _sig.prototype.sendMessage = function (msg, toPeer, info) {\n      if (!info) info = {};\n      console.log(\n        \"*signal*  sendMessage: \",\n        msg,\n        \", to: \",\n        toPeer,\n        \" info: \",\n        info\n      );\n      if (msg === undefined || msg.length < 1) return;\n      var pkt = {\n        t: \"u\", // user message service\n        m: {\n          f: this.channelPath + this.userName,\n          o: !!info.m_event ? info.m_event : \"message\",\n        },\n        p: { msg: msg },\n      };\n      //if its to a peer, add direct message var (t) to meta object.\n      if (!!toPeer) pkt.m.t = toPeer;\n      //console.log('*signal*  sendMessage pkt: ',pkt);\n      this.sig.send(JSON.stringify(pkt));\n\n      return pkt;\n    };\n\n    //formats the custom channel path how we need it.\n    _sig.prototype.cleanChPath = function (path) {\n      //has slash at front\n      if (path.indexOf(\"/\") !== 0) path = \"/\" + path;\n      if (path.lastIndexOf(\"/\") === path.length - 1)\n        path = path.substr(0, path.lastIndexOf(\"/\"));\n      //console.log('cleanChPath new path: '+path);\n      return path;\n    };\n\n    //Keeps pinging signal server to keep connection alive.\n    _sig.prototype.startHeart = function () {\n      //console.log('*signal*  startHeart ',this.keepAliveInt);\n      if (!!this.heartbeat) clearInterval(this.heartbeat);\n      var own = this;\n      this.heartbeat = setInterval(function () {\n        own.sig.send(\"ping\");\n      }, $xirsys.signal.keepAliveInt);\n    };\n    _sig.prototype.stopHeart = function () {\n      clearInterval(this.heartbeat);\n      this.heartbeat = null;\n      //this.sig = null;\n      console.log(\"signal closed!\");\n    };\n\n    //events\n    _sig.prototype.on = function (sEvent, cbFunc) {\n      //console.log('*signal*  on ',sEvent,', func: '+cbFunc);\n      if (!sEvent || !cbFunc) {\n        console.log('error:  missing arguments for \"on\" event.');\n        return false;\n      }\n      //if event does not exist create it and give it an array for listeners.\n      if (!this.evtListeners[sEvent]) this.evtListeners[sEvent] = [];\n      //add listener to event.\n      this.evtListeners[sEvent].push(cbFunc);\n    };\n    _sig.prototype.off = function (sEvent, cbFunc) {\n      if (!this.evtListeners.hasOwnProperty(sEvent)) return false; //end\n\n      var index = this.evtListeners[sEvent].indexOf(cbFunc);\n      if (index !== -1) {\n        this.evtListeners[sEvent].splice(index, 1);\n        return true; //else end here.\n      }\n      return false; //else end here.\n    };\n\n    _sig.prototype.emit = function (sEvent, data) {\n      //console.log('*signal*  emit ',sEvent,', func: '+data);\n      var handlers = this.evtListeners[sEvent];\n      if (!!handlers) {\n        var l = handlers.length;\n        for (var i = 0; i < l; i++) {\n          var item = handlers[i];\n          item.apply(this, [{ type: sEvent, data: data }]);\n        }\n      }\n    };\n    console.log(\"$xirsys.signal Loaded Successfuly!!!\");\n    _sig = null;\n\n    // p2p\n\n    var _p2p = ($xirsys.p2p = function (signal, mediaStream, servers, info) {\n      if (!info) info = {};\n      //info can have TURN only filter.\n      console.log(\n        \"*p2p*  servers: \",\n        servers,\n        \", mediaStream: \",\n        mediaStream,\n        \", sig: \",\n        signal,\n        \", info: \",\n        info\n      );\n      this.evtListeners = {};\n      this.pc = null; //peer connection\n\n      var own = this;\n      this.sig = signal;\n      if (!!this.sig) {\n        this.sig.on(\"candidate\", (evt) => {\n          own.receiveCandidate(evt);\n        });\n        this.sig.on(\"offer\", (evt) => {\n          own.receiveOffer(evt);\n        });\n        this.sig.on(\"answer\", (evt) => {\n          own.receiveAnswer(evt);\n        });\n      }\n      this.servers = !!servers ? servers : {};\n      this.forceTurn = info.forceTurn != null ? info.forceTurn : false;\n      this.stream = mediaStream;\n      this.remotePeerID = null;\n      this.remoteStreams = {};\n\n      this.isCaller = null; //true / false\n      this.autoAnswer = info.autoAnswer != null ? info.autoAnswer : true;\n    });\n\n    _p2p.prototype.peerConnSuccess = \"peer.connect.success\";\n    _p2p.prototype.peerConnRequest = \"peer.connect.request\";\n    _p2p.prototype.iceDisconnected = \"peer.connect.disconnected\";\n\n    _p2p.prototype.close = function () {\n      if (this.pc) {\n        this.pc.close();\n      }\n      this.remoteStreams = {};\n      this.remotePeerID = null;\n      this.isCaller = null;\n    };\n    //used to update the media and renegociate p2p connection.\n    _p2p.prototype.updateMediaStream = function (mediaStream) {\n      console.log(\"*p2p*  updateMediaStream \", mediaStream);\n\n      this.stream = mediaStream;\n      if (!!this.pc && this.stream) {\n        this.isCaller = true;\n        const own = this;\n        // this.pc.addStream(this.stream);`\n        this.stream.getTracks().forEach((track) => {\n          own.pc.addTrack(track, own.stream);\n        });\n        this.pc\n          .createOffer()\n          .then((desc) => {\n            own.setLocalAndSendMessage(desc);\n          }) // success\n          .catch((err) => {\n            own.onCreateSessionDescriptionError(err);\n          }); // error\n      }\n      return true;\n    };\n    //calls peer @custID and estblishes a p2p connection.\n    _p2p.prototype.callPeer = function (custID) {\n      console.log(\"*p2p*  callPeer \", custID);\n      if (this.createPeerConnection() && this.stream) {\n        //this flag tells our code we are doing the calling.\n        console.log(\"this pc =>> \", this.pc, this);\n        this.isCaller = true;\n        const own = this;\n        this.remotePeerID = custID;\n        // this.pc.addStream(this.stream);\n        this.stream.getTracks().forEach((track) => {\n          own.pc.addTrack(track, own.stream);\n        });\n        this.pc\n          .createOffer()\n          .then((desc) => {\n            own.setLocalAndSendMessage(desc);\n          }) // success\n          .catch((err) => {\n            own.onCreateSessionDescriptionError(err);\n          }); // error\n      }\n    };\n\n    _p2p.prototype.receiveCandidate = function (evt) {\n      if (!this.pc) return false;\n      var iceCandidate = evt.data;\n      //console.log('*p2p*  receiveCandidate ',iceCandidate);\n      var rtcIceCandidate = new RTCIceCandidate(iceCandidate);\n      this.pc.addIceCandidate(rtcIceCandidate);\n    };\n\n    //user calles to accept offer when this has autoAnswer false\n    _p2p.prototype.acceptRequest = function (offer) {\n      //Pass offer to method with true which tells method offer was accepted.\n      this.receiveOffer(offer, true);\n    };\n\n    _p2p.prototype.receiveOffer = function (evt, isVerfied) {\n      var verified = isVerfied === true;\n      var desc = evt.data;\n      console.log(\n        \"*p2p*  receiveOffer \",\n        desc,\n        \" remotePeerID = \",\n        this.remotePeerID,\n        \"autoAnswer\",\n        this.autoAnswer\n      );\n      //if autoAnser is false, and this has not been verified, stop and emit request event.\n      if (!this.autoAnswer && !verified) {\n        console.log(\"needs verification!\");\n        this.emit(this.peerConnRequest, evt.data);\n        return;\n      }\n      var own = this;\n      //if autoAnser is false and has been verfied, OR autoAnswer is true then connect us.\n      if (!this.remotePeerID && !!desc.f) this.remotePeerID = desc.f;\n      console.log(\"*p2p*  !pc \", this.pc, \", !iscaller: \", this.isCaller);\n      if (!this.pc && !this.isCaller) {\n        if (this.createPeerConnection() && this.stream) {\n          // this.pc.addStream(this.stream);\n          this.stream.getTracks().forEach((track) => {\n            own.pc.addTrack(track, own.stream);\n          });\n        }\n      }\n\n      try {\n        this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n      } catch (e) {\n        console.error(\"**P2p** setRemoteDescription offer ,\", e);\n      }\n\n      this.pc\n        .createAnswer()\n        .then((desc) => {\n          own.setLocalAndSendMessage(desc);\n        }) // success\n        .catch((err) => {\n          own.onCreateSessionDescriptionError(err);\n        }); // error\n    };\n\n    _p2p.prototype.receiveAnswer = function (evt) {\n      var desc = evt.data;\n      console.log(\"*p2p*  receiveAnswer \", desc);\n      if (this.remotePeerID !== desc.f) return; //not the droid were looking for.\n      try {\n        this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n      } catch (e) {\n        console.error(\"**P2p** setRemoteDescription answer ,\", e);\n      }\n    };\n\n    _p2p.prototype.createPeerConnection = function () {\n      console.log(\"*p2p*  createPeerConnection \");\n      //if(!!this.pc) return true;\n      try {\n        var own = this;\n        console.log(\"RTCPeerConnection servers:  \", this.servers);\n        this.pc = new RTCPeerConnection(this.servers);\n\n        this.pc.ontrack = (event) => {\n          event.streams[0].getTracks().forEach((track) => {\n            console.log(rstream, \"rstreeeeem\");\n            rstream.addTrack(track);\n          });\n        };\n\n        this.pc.onicecandidate = function (evt) {\n          //send to peer\n          var cand = evt.candidate;\n          if (!cand) return;\n          if (own.forceTurn && cand.candidate.indexOf(\"typ relay\") === -1) {\n            cand = null;\n          } else {\n            //console.log('Is Turn: ',own.forceTurn,' Candidate: ',cand);\n            own.sig.sendMessage(\n              {\n                type: \"candidate\",\n                candidate: cand.candidate,\n                sdpMid: cand.sdpMid,\n                sdpMLineIndex: cand.sdpMLineIndex,\n              },\n              own.remotePeerID\n            );\n          }\n        };\n        // this.pc.onaddstream = (evt) => {\n        //   console.log(\"*p2p*  onaddstream \", evt);\n        //   own.addRemoteStream(evt.stream); //remoteStreams\n        // };\n        this.pc.onremovestream = (evt) =>\n          console.log(\"*p2p*  onremovestream \", evt);\n        this.pc.onconnectionstatechange = (evt) =>\n          console.log(\n            \"*p2p*  onconnectionstatechange: \" + own.pc.connectionState\n          );\n        this.pc.oniceconnectionstatechange = (evt) => {\n          console.log(\n            \"*p2p*  oniceconnectionstatechange: \" + own.pc.iceConnectionState\n          );\n\n          // this.pc.ontrack = (event) => {\n          //   event.streams[0].getTracks().forEach((track) => {\n          //     own.addTrack(track);\n          //   });\n          // };\n\n          switch (own.pc.iceConnectionState) {\n            case \"checking\":\n              break;\n            case \"connected\":\n              break;\n            case \"disconnected\":\n              own.emit(own.iceDisconnected, own.remotePeerID);\n              break;\n            case \"failed\":\n              break;\n            case \"closed\":\n              own.pc = null;\n              console.log(\"pc: \", own.pc);\n              break;\n            default:\n              break;\n          }\n        };\n        return true;\n      } catch (e) {\n        console.log(\"Failed to create PeerConnection, exception: \" + e.message);\n        return false;\n      }\n    };\n\n    _p2p.prototype.hangup = function (callId) {\n      console.log(\"*p2p*  hangup\", callId);\n      //var stream = this.remoteStreams[callId];\n      this.pc.close();\n      this.remoteStreams[callId] = null;\n      this.remotePeerID = null;\n      this.isCaller = false;\n      //if no streams close and nulify pc.\n      //this.pc = null;\n    };\n\n    _p2p.prototype.addTrack = function (track) {\n      this.remoteStreams[this.remotePeerID] = track;\n      this.emit(this.peerConnSuccess, this.remotePeerID);\n      this.isCaller = false;\n    };\n\n    _p2p.prototype.addRemoteStream = function (remoteStream) {\n      this.remoteStreams[this.remotePeerID] = remoteStream;\n      this.emit(this.peerConnSuccess, this.remotePeerID);\n      this.isCaller = false;\n    };\n\n    _p2p.prototype.getLiveStream = function (remotePeerID) {\n      return this.remoteStreams[remotePeerID];\n    };\n\n    _p2p.prototype.setLocalAndSendMessage = function (sessionDescription) {\n      console.log(\n        \"*p2p*  setLocalAndSendMessage sending message\",\n        sessionDescription\n      );\n      this.pc.setLocalDescription(sessionDescription);\n      //sendMessage(sessionDescription);\n      console.log(\"sendMessage for: \", this.remotePeerID);\n      this.sig.sendMessage(sessionDescription, this.remotePeerID);\n    };\n\n    _p2p.prototype.onCreateSessionDescriptionError = function (error) {\n      console.log(\"Failed to create session description: \", error);\n    };\n\n    /* EVENTS */\n\n    _p2p.prototype.on = function (sEvent, cbFunc) {\n      //console.log('*p2p*  on ',sEvent,', func: '+cbFunc);\n      if (!sEvent || !cbFunc) {\n        console.log(\"error:  missing arguments for on event.\");\n        return false;\n      }\n      if (!this.evtListeners[sEvent]) this.evtListeners[sEvent] = [];\n      this.evtListeners[sEvent].push(cbFunc);\n    };\n    _p2p.prototype.off = function (sEvent, cbFunc) {\n      console.log(\"off\");\n      this.evtListeners.push(cbFunc);\n    };\n\n    _p2p.prototype.emit = function (sEvent, data) {\n      var handlers = this.evtListeners[sEvent];\n      if (!!handlers) {\n        var l = handlers.length;\n        for (var i = 0; i < l; i++) {\n          var item = handlers[i];\n          item.apply(this, [{ type: sEvent, data: data }]);\n        }\n      }\n    };\n\n    console.log(\"$xirsys.p2p Loaded Successfuly!!!\");\n    _p2p = null;\n  }, []);\n\n  return { $xirsys };\n}\n\nexport default Xirsys;\n","import $ from \"jquery\";\nimport Xirsys from \"./Xirsys\";\nimport { useState, useEffect } from \"react\";\n\nfunction Main() {\n  // const location = {};\n\n  //custom: check URL for \"ch\" var, and set the channel accourdingly\n  var channelPath = \"\"; //set this variable to specify a channel path\n  // var ch = decodeURI(\n  //   (RegExp(\"ch\" + \"=\" + \"(.+?)(&|$)\").exec(location.search) || [, null])[1]\n  // );\n  // if (ch != \"null\") channelPath = ch;\n  console.log(\"channel path: \", channelPath);\n\n  var mediaConstraints = {\n    audio: true,\n  };\n\n  const [lstream, setLStream] = useState(null);\n  const [rstream, setRStream] = useState(new MediaStream());\n  const [username, setUsername] = useState(null);\n  const [remoteCallID, setRemoteCallID] = useState(null);\n\n  const [startCall, setStartCall] = useState(false);\n\n  const [peer, setPeer] = useState(null);\n  const [sig, setSig] = useState(null);\n  const [media, setMedia] = useState(null);\n  const [ice, setIce] = useState(null);\n\n  const [call, setCall] = useState(false);\n  const [inCall, setInCall] = useState(false);\n\n  const { $xirsys } = Xirsys(setRemoteCallID, rstream);\n\n  useEffect(() => {\n    if (lstream) {\n      //create signal if null\n      if (!sig)\n        setSig(\n          new $xirsys.signal(\"/webrtc\", username, { channel: channelPath })\n        );\n      //if the peer is created, update our media\n      if (!!peer) peer.updateMediaStream(lstream);\n    }\n  }, [lstream]);\n\n  useEffect(() => {\n    if (peer) {\n      peer.on(peer.peerConnSuccess, onStartCall);\n      console.log(\"peer \", peer);\n    }\n    console.log(\"peer \", peer);\n  }, [peer]);\n\n  useEffect(() => {\n    if (call) {\n      callRemotePeer();\n      setCall(false);\n    }\n  }, [call]);\n\n  useEffect(() => {\n    if (sig) doSignal();\n  }, [sig]);\n\n  useEffect(() => {\n    if (media) getMyMedia();\n  }, [media]);\n\n  useEffect(() => {\n    if (ice) ice.on(ice.onICEList, onICE);\n  }, [ice]);\n\n  useEffect(() => {\n    console.log(\"remote Id == \", remoteCallID);\n\n    if (sig && remoteCallID && remoteCallID !== username) doSignal();\n  }, [remoteCallID]);\n  //if there is no remoteCallID show sharable link to call user.\n\n  function callRemotePeer() {\n    if (!!remoteCallID) {\n      console.log(\"Calling \" + remoteCallID);\n      peer.callPeer(remoteCallID);\n    } else {\n      console.log(\"Error\", \"A remote peer was not found!\");\n    }\n  }\n\n  // Get Xirsys ICE (STUN/TURN)\n  function doICE() {\n    console.log(\"doICE \");\n    if (!ice) {\n      setIce(new $xirsys.ice(\"/webrtc\", { channel: channelPath }));\n      //   ice.on(ice.onICEList, onICE);\n    }\n  }\n\n  function onICE(evt) {\n    console.log(\"onICE \", evt);\n    if (evt.type === ice.onICEList) {\n      //   getMyMedia();\n      setMedia(new $xirsys.media());\n    }\n  }\n\n  //Get local user media\n  function getMyMedia() {\n    console.log(\"getMyMedia()\");\n    //setup media\n    // if (!media) {\n    //   media = new $xirsys.media();\n    media.on(media.DEVICES_UPDATED, onMediaDevices); //returns list of media devices on local user machine.\n    media.on(media.ON_LOCAL_STREAM, onMediaDevices); //returns a/v stream of local user.\n    // }\n    //gets stream object of local users a/v\n    media\n      .getUserMedia(mediaConstraints)\n      .then((str) => {\n        console.log(\"*main*  getUser Media stream: \", str);\n\n        setLocalStream(str);\n        //create signal if null\n        // if (!sig) doSignal();\n        // //if the peer is created, update our media\n        // if (!!peer) peer.updateMediaStream(lstream);\n      })\n      .catch((err) => {\n        console.log(\"Could not get Media: \", err);\n        alert(\"Could not get Media!! Please check your camera and mic.\");\n      });\n  }\n\n  //Get Xirsys Signaling service\n  function doSignal() {\n    sig.on(\"message\", (msg) => {\n      let pkt = JSON.parse(msg.data);\n\n      console.log(\"message log ,\", msg, $xirsys);\n\n      let payload = pkt.p; //the actual message data sent\n      let meta = pkt.m; //meta object\n      let msgEvent = meta.o; //event label of message\n      // let toPeer = meta.t; //msg to user (if private msg)\n      let fromPeer = meta.f; //msg from user\n      //remove the peer path to display just the name not path.\n      if (!!fromPeer) {\n        let p = fromPeer.split(\"/\");\n        fromPeer = p[p.length - 1];\n      }\n      switch (msgEvent) {\n        //first Connect Success!, list of all peers connected.\n        case \"peers\":\n          //this is first call when you connect,\n          onReady();\n          // if we are connecting to a remote user and remote\n          // user id is found in the list then initiate call\n          if (!!remoteCallID) {\n            let users = payload.users;\n            if (users.indexOf(remoteCallID) > -1) {\n              setCall(true);\n            }\n          }\n          break;\n        //peer gone.\n        case \"peer_removed\":\n          if (fromPeer === remoteCallID) onStopCall();\n          break;\n\n        // new peer connected\n        //case \"peer_connected\":\n        // \taddUser(fromPeer);\n        // \tbreak;\n        // message received. Call to display.\n        //case 'message':\n        // \tonUserMsg(payload.msg, fromPeer, toPeer);\n        // \tbreak;\n        default:\n          break;\n      }\n    });\n  }\n\n  //Ready - We have our ICE servers, our Media and our Signaling.\n  function onReady() {\n    console.log(\"* onReady!\");\n    // setup peer connector, pass signal, our media and iceServers list.\n    let isTURN = getURLParameter(\"isTURN\") === \"true\"; //get force turn var.\n    console.log(\"isTURN \", isTURN);\n    setPeer(\n      new $xirsys.p2p(\n        sig,\n        lstream,\n        !ice ? {} : { iceServers: ice.iceServers },\n        { forceTurn: isTURN }\n      )\n    );\n    //add listener when a call is started.\n  }\n  // A peer call started udpate the UI to show remote video.\n  function onStartCall(evt) {\n    console.log(\"*main*  onStartCall \", evt);\n    let remoteId = evt.data;\n    console.log(\"peer scall \", peer);\n    setRemoteStream(peer.getLiveStream(remoteId));\n    //   shareTitleEl.innerHTML = \"In call with user:\";\n    setRemoteCallID(remoteId);\n    setInCall(true);\n  }\n\n  function onStopCall() {\n    console.log(\"*main*  onStopCall \");\n    if (inCall) {\n      peer.hangup(remoteCallID);\n    }\n    setInCall(false);\n    setRemoteCallID(null);\n    setIce(null);\n    setPeer(null);\n    setMedia(null);\n    setSig(null);\n    setStartCall(false);\n  }\n\n  /* UI METHODS */\n\n  //sets local user media to video object.\n  function setLocalStream(str) {\n    console.log(\"*main*  setLocalStream & Video obj \", str);\n    // localStream = str;\n    setLStream(str);\n    // localVideoEl.srcObject = str;\n  }\n  //sets remote user media to video object.\n  function setRemoteStream(str) {\n    console.log(\"*main*  setRemoteStream & Video obj \", str);\n    // remoteStream = str;\n    console.log($xirsys.pc, \"PC\");\n    // $xirsys.pc.ontrack = (event) => {\n    //   event.streams[0].getTracks().forEach((track) => {\n    //     rstream.addTrack(track);\n    //   });\n    // };\n    // setRStream(str);\n    setStartCall(true);\n  }\n  //update the list of media sources on UI\n  function onMediaDevices(e) {\n    console.log(\"*main*  onMediaDevices: \", e, \" data: \", e.data);\n    switch (e.type) {\n      case media.DEVICES_UPDATED:\n        updateDevices(e.data);\n        break;\n      case media.ON_LOCAL_STREAM:\n        //update list with selected.\n        setSelectedDevices(e.data.getTracks());\n        break;\n      default:\n        break;\n    }\n  }\n\n  function updateDevices(devices) {\n    const mics = devices.audioin,\n      cams = devices.videoin;\n    console.log(\"*main*  updateDevices - mics:\", mics, \", cams:\", cams);\n    const camList = $(\"#ctrlMenu #camList\"),\n      micList = $(\"#ctrlMenu #micList\");\n    //camToggle = $('#ctrlMenu #camToggle'),\n    //micToggle = $('#ctrlMenu #micToggle');\n\n    micList.empty();\n    mics.forEach((device) => {\n      micList.append(\n        '<li><a id=\"' +\n          device.deviceId +\n          '\" data-group-id=\"' +\n          device.groupId +\n          '\" class=\"btn\" role=\"button\">' +\n          device.label +\n          \"</a></li>\"\n      );\n    });\n\n    camList.empty();\n    cams.forEach((device) => {\n      camList.append(\n        '<li><a id=\"' +\n          device.deviceId +\n          '\" data-group-id=\"' +\n          device.groupId +\n          '\" class=\"btn\" role=\"button\">' +\n          device.label +\n          \"</a></li>\"\n      );\n    });\n  }\n\n  function setSelectedDevices(devices) {\n    console.log(\"*main*  setSelectedDevices: \", devices);\n    //console.log('- video: ',devices.getVideoTracks() );\n    devices.forEach((device) => {\n      switch (device.kind) {\n        case \"audio\":\n          console.log(\"- audio toggel: \", device);\n          $(\"#ctrlMenu #micToggle\").html(\n            device.label.substr(0, 20) + '<span class=\"caret\"></span>'\n          );\n          break;\n        case \"video\":\n          console.log(\"- video toggel: \", device);\n          $(\"#ctrlMenu #camToggle\").html(\n            device.label.substr(0, 20) + '<span class=\"caret\"></span>'\n          );\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  /* TOOLS */\n\n  // function hasMedia(label, tracks) {\n  //   console.log(\"tracks: \", tracks, \", label: \", label);\n  //   let l = tracks.length,\n  //     i,\n  //     hasIt = false;\n  //   for (i = 0; i < l; i++) {\n  //     let track = tracks[i];\n  //     if (track.label.indexOf(label) > -1) {\n  //       hasIt = true;\n  //       break;\n  //     }\n  //   }\n  //   return hasIt;\n  // }\n\n  //gets URL parameters\n  function getURLParameter(name) {\n    var url_string = window.location.href;\n    var url = new URL(url_string);\n    var c = url.searchParams.get(name);\n\n    return c ? c : null;\n  }\n  //makes unique userid\n  function guid(s = \"user\") {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return s + s4() + s4();\n  }\n\n  const onLoad = () => {\n    console.log(\"pretty loaded!!\");\n    setUsername(guid()); //create random local username\n    let urlName = getURLParameter(\"callid\"); //get call id if exists from url\n    if (!!urlName) {\n      setRemoteCallID(urlName);\n    }\n\n    //get Xirsys service\n    doICE();\n  };\n\n  return {\n    onLoad,\n    lstream,\n    rstream,\n    setLStream,\n    setRStream,\n    onStopCall,\n    startCall,\n  };\n}\nexport default Main;\n\n// export const stream = { localStream, remoteStream };\n","import React, { useEffect, useState } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport WaveAudio from \"./WaveAudio\";\n\nimport Main from \"../hooks/Main1\";\n\nfunction Audio({ type = 0, answer }) {\n  const {\n    onLoad,\n    lstream,\n    rstream,\n    setRStream,\n    setLStream,\n    onStopCall,\n    startCall,\n  } = Main();\n\n  const [stream, setStream] = useState(null);\n\n  useEffect(() => {\n    if (type === 0) {\n      setLStream(null);\n      setRStream(null);\n      stopAudioOnly(lstream);\n      stopAudioOnly(rstream);\n      onStopCall();\n    } else if (type === 1) {\n      onLoad();\n    }\n\n    if (type !== 2) setStream(null);\n  }, [type]);\n\n  useEffect(() => {\n    if (startCall) {\n      answer();\n    }\n  }, [startCall]);\n\n  // useEffect(() => {\n  //   console.log(\"r ===>> \", rstream);\n  //   if (rstream.active) {\n  //     answer();\n  //   }\n  // }, [rstream]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const s = rstream;\n      if (s) {\n        // console.log(\"rstream s ===>> \", s);\n        if (s.active) {\n          console.log(\"answer call\");\n          setStream(s);\n          answer();\n        }\n      }\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return type === 1 ? (\n    <Loader type=\"Bars\" color=\"rgba(102, 193, 113, 1)\" height={80} width={80} />\n  ) : type === 2 && stream ? (\n    <WaveAudio stream={stream} lstream={lstream} />\n  ) : (\n    <div></div>\n  );\n}\n\nexport default Audio;\n\nfunction stopAudioOnly(stream) {\n  if (stream)\n    stream.getTracks().forEach(function (track) {\n      if (track.readyState === \"live\" && track.kind === \"audio\") {\n        track.stop();\n      }\n    });\n}\n","import { useState } from \"react\";\n\nfunction Call() {\n  const [state, setState] = useState(0);\n  const [btnText, setBtnText] = useState(\"Call\");\n\n  const click = function () {\n    state === 0 && (setState(1) || setBtnText(\"Dialling\"));\n    state === 1 && (setState(0) || setBtnText(\"Call\"));\n    // state === 1 && (setState(2) || setBtnText(\"End\"));\n    state === 2 && (setState(0) || setBtnText(\"Call\"));\n  };\n\n  const answer = function () {\n    console.log(\"answer fire\");\n    setState(2);\n    setBtnText(\"End\");\n  };\n\n  return { state, click, btnText, answer };\n}\n\nexport default Call;\n","import React from \"react\";\nimport Audio from \"./component/Audio\";\nimport Call from \"./hooks/Call\";\n\nfunction App() {\n  const { state, click, btnText, answer } = Call();\n\n  return (\n    <div className=\"App\">\n      <div className=\"logo\">\n        <h4>TalkTime</h4>\n      </div>\n      <div>\n        <h5>Find someone to talk to.</h5>\n      </div>\n      <div className=\"audio-animation\">\n        <Audio type={state} answer={answer} />\n      </div>\n      <div className=\"button\">\n        <button onClick={click} className={btnText}>\n          {btnText}\n        </button>\n      </div>\n      <div className=\"footer\">\n        <a href=\"/privacy\">Privacy Policy</a> | <a href=\"/terms\">Terms</a>\n      </div>\n\n      {/* <section id=\"share-view\" class=\"row\">\n        <h3 id=\"share-title\">Copy and Share this URL:</h3>\n        <div id=\"callIDView\" class=\"input-group col-sm-8 col-sm-offset-2\">\n          <input\n            id=\"callID\"\n            type=\"text\"\n            class=\"form-control\"\n            aria-label=\"...\"\n            readonly\n          />\n          <div class=\"input-group-btn\">\n            <span id=\"isTURN\" class=\"input-group-addon\">\n              <input id=\"isTURNcb\" type=\"checkbox\" aria-label=\"...\" />\n              <label for=\"isTURN\"> Force TURN</label>\n            </span>\n          </div>\n        </div>\n      </section> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}